searchState.loadedDescShard("rainy_sdk", 0, "Rainy SDK\nThe default base URL for the Rainy API.\nThe current version of the Rainy SDK.\nHandles authentication and API key management.\nThe main client for interacting with the Rainy API.\nDefines error types and result aliases for the SDK.\nContains the data models for API requests and responses.\nRe-export of the <code>reqwest</code> crate for convenience.\nImplements retry logic with exponential backoff.\nRe-export of the <code>serde_json</code> crate for convenience.\nConfiguration for authentication and client behavior.\nA simple rate limiter.\nThe API key used for authenticating with the Rainy API.\nThe base URL of the Rainy API. Defaults to the official …\nBuilds the necessary HTTP headers for an API request.\nA flag to enable or disable automatic retries with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum number of times to retry a failed request.\nCreates a new <code>AuthConfig</code> with the given API key and …\nCreates a new <code>RateLimiter</code>.\nReturns the request timeout as a <code>Duration</code>.\nThe timeout for HTTP requests, in seconds.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe user agent string to send with each request.\nValidates the <code>AuthConfig</code> settings.\nPauses execution if the rate limit has been exceeded.\nSets a custom base URL for the API.\nSets the maximum number of retry attempts for failed …\nEnables or disables automatic retries.\nSets a custom timeout for HTTP requests.\nSets a custom user agent string for requests.\nThe main client for interacting with the Rainy API.\nReturns a reference to the current authentication …\nReturns the base URL being used by the client.\nCreates a chat completion based on the provided request.\nCreate a new API key\nCreate a chat completion\nCreate a chat completion with streaming\nDelete an API key\nPerforms a detailed health check on the Rainy API and its …\nReturns the argument unchanged.\nRetrieves the list of available models and providers from …\nGet credit statistics\nGet usage statistics\nGet current user account information\nPerforms a basic health check on the Rainy API.\nCalls <code>U::from(self)</code>.\nList all API keys for the current user\nCreates a simple chat completion with a single user prompt.\nUpdate an API key\nCreates a new <code>RainyClient</code> with the given API key.\nCreates a new <code>RainyClient</code> with a custom <code>AuthConfig</code>.\nSets a custom retry configuration for the client.\nA generic API error that doesn’t fit into the other …\nDetailed information about an API error.\nThe structure of a standard error response from the Rainy …\nAn error related to authentication, such as an invalid or …\nContains the error value\nAn error indicating that the account has insufficient …\nAn error due to an invalid request, such as a missing …\nAn error related to network connectivity or HTTP-level …\nContains the success value\nAn error that originates from an underlying AI provider …\nThe comprehensive error type for all operations within the …\nAn error indicating that the rate limit for the API has …\nA convenience type alias for <code>Result&lt;T, RainyError&gt;</code>.\nAn error that occurs during serialization or …\nAn error indicating that the request timed out.\nReturns the machine-readable error code, if available.\nA machine-readable error code.\nAdditional, structured details about the error.\nThe detailed error information.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the error is considered retryable.\nA human-readable error message.\nReturns the unique request ID associated with the error, …\nThe unique ID of the request.\nReturns the recommended delay in seconds before a retry, …\nIndicates whether the request that caused this error can …\nThe timestamp of when the error occurred.\n<code>ToString::to_string</code>, but without panic on OOM.\nA machine-readable error code (e.g., <code>INVALID_API_KEY</code>).\nA machine-readable error code (e.g., <code>MISSING_REQUIRED_FIELD</code>…\nThe error code from the provider.\nA machine-readable error code (e.g., <code>RATE_LIMIT_EXCEEDED</code>).\nA machine-readable error code (e.g., <code>INSUFFICIENT_CREDITS</code>).\nA machine-readable error code.\nThe current credit balance of the account.\nInformation about the current usage, if available.\nAdditional details about the error, if available.\nThe timeout duration in milliseconds.\nThe estimated cost of the request.\nA human-readable error message.\nA human-readable error message.\nThe error message from the provider.\nA human-readable error message.\nA human-readable error message.\nA message describing the network error.\nA human-readable error message.\nA message describing the timeout.\nA message describing the serialization error.\nThe name of the provider that returned the error.\nThe unique ID of the request, for debugging purposes.\nThe date when the credits are scheduled to be reset or …\nThe recommended time to wait before retrying, in seconds.\nIndicates whether the request can be retried.\nIndicates whether the request can be retried.\nIndicates whether the request can be retried.\nIndicates whether the request can be retried.\nThe underlying error message, if available.\nThe underlying error message, if available.\nThe HTTP status code of the response.\nRepresents an API key (legacy).\nA message from the assistant.\nA message from the assistant.\nRepresents the available models and providers.\nRepresents a single choice in a chat completion response.\nRepresents a request to create a chat completion.\nRepresents the response from a chat completion request.\nRepresents a single message in a chat conversation.\nA legacy type alias for <code>MessageRole</code>.\nA legacy type alias for <code>Usage</code>.\nRepresents information about credit usage for a request.\nRepresents a single credit transaction (legacy).\nRepresents usage data for a single day (legacy).\nThe API is in a degraded state.\nA legacy type alias for <code>HealthStatus</code>.\nRepresents the status of backend services (legacy).\nRepresents the health status of the Rainy API.\nThe health status of the API (legacy).\nThe API is healthy.\nThe role of a message’s author.\nThe API needs initialization.\nA transaction for a credit purchase.\nA transaction for a credit refund.\nRepresents metadata extracted from the response headers of …\nA transaction for a credit reset.\nRepresents the status of individual backend services.\nA message from the system, setting the context or …\nA message from the system, setting the context or …\nThe type of a credit transaction (legacy).\nThe API is unhealthy.\nRepresents the token usage statistics for a chat …\nA transaction for API usage.\nRepresents usage statistics over a period (legacy).\nRepresents a user account (legacy).\nA message from the user.\nA message from the user.\nA list of provider names that are currently active and …\nCreates a new message with the <code>Assistant</code> role.\nA list of chat completion choices.\nThe number of tokens in the generated completion.\nThe number of tokens in the generated completion.\nThe content of the message.\nThe Unix timestamp (in seconds) of when the completion was …\nThe timestamp of when the user account was created.\nThe timestamp of when the key was created.\nThe timestamp of when the transaction occurred.\nThe estimated number of credits remaining after the …\nThe amount of credits involved in the transaction.\nThe credit balance after the transaction.\nThe number of credits remaining after the request.\nThe date when the user’s credits will reset.\nThe number of credits used for the request.\nThe number of credits used on this day.\nThe amount of credits the user has used in the current …\nThe number of credits available before the request.\nThe user’s current credit balance.\nA list of daily usage data.\nThe status of the database connection.\nThe status of the database connection.\nThe date for the usage data.\nA description of the key.\nA description of the transaction.\nThe estimated number of credits that the request will cost.\nThe expiration date of the key, if any.\nThe reason the model stopped generating tokens.\nA penalty applied to new tokens based on their frequency …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA unique identifier for the chat completion.\nThe unique ID of the user.\nThe unique ID of the API key.\nThe unique ID of the transaction.\nThe index of the choice in the list of choices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if the user account is active.\nIndicates if the API key is active.\nThe API key string.\nThe timestamp of when the key was last used.\nThe maximum number of tokens to generate in the completion.\nThe message generated by the model.\nA list of messages that form the conversation history.\nThe identifier of the model to use for the completion …\nThe model that was used for the completion.\nThe model associated with the transaction, if any.\nA collection of predefined model constants for convenience.\nCreates a new <code>ChatCompletionRequest</code> with the given model …\nThe type of object, which is always “chat.completion”.\nThe ID of the user who owns the key.\nThe number of days in the usage period.\nThe name of the user’s subscription plan.\nA penalty applied to new tokens based on whether they …\nThe number of tokens in the prompt.\nThe number of tokens in the prompt.\nA hint to the router about which provider to use for the …\nThe AI provider that handled the request.\nThe provider associated with the transaction, if any.\nA collection of predefined provider name constants for …\nThe overall status of the connections to AI providers.\nA map where keys are provider names and values are lists …\nThe overall status of AI providers.\nA list of recent credit transactions.\nThe status of the Redis connection, if applicable.\nThe status of the Redis connection.\nThe unique ID of the request, for tracking and debugging.\nThe number of requests made on this day.\nThe date when the credit balance is next scheduled to be …\nThe time taken for the request to complete, in …\nThe role of the message author.\nThe status of individual services.\nThe status of individual services.\nThe overall status of the API (e.g., “healthy”, “…\nThe overall status of the API (e.g., “healthy”, “…\nA list of sequences that will cause the model to stop …\nIf set to <code>true</code>, the response will be streamed as a series …\nCreates a new message with the <code>System</code> role.\nThe sampling temperature to use, between 0.0 and 2.0. …\nThe timestamp of when the health check was performed.\nThe timestamp of when the health check was performed.\nThe number of tokens used on this day.\nThe number of tokens used in the request.\nThe nucleus sampling parameter. The model considers the …\nThe total number of available models across all providers.\nThe total number of requests made in the period.\nThe total number of tokens used in the request (prompt + …\nThe total number of tokens used in the request (prompt + …\nThe total number of tokens used in the period.\nThe type of the transaction.\nThe uptime of the system in seconds.\nThe uptime of the system in seconds.\nInformation about the token usage for this completion.\nCreates a new message with the <code>User</code> role.\nA unique identifier representing your end-user, which can …\nThe user’s identifier string.\nSets the maximum number of tokens to generate.\nSets a provider hint for the request.\nEnables or disables streaming for the response.\nSets the temperature for the chat completion.\nSets the user identifier for the chat completion.\nConstant for the Enosis Labs Astronomer model.\nConstant for the Enosis Labs Astronomer 1 Fast model.\nConstant for the Enosis Labs Astronomer 1 Max model.\nConstant for the Qwen Qwen3 32B model. (Deprecated, use “…\nConstant for the Claude Opus 4.1 model.\nConstant for the Claude Sonnet 4 model.\nConstant for the Deepseek R1 Distill Llama 70B model.\nConstant for the Gemini 2.5 Flash model.\nConstant for the Gemini 2.5 Flash Lite model.\nConstant for the Qwen3 Instruct model. (Deprecated, use “…\nConstant for the GPT-4o model.\nConstant for the GPT-5 model.\nConstant for the GPT-5 Pro model.\nConstant for the Groq Compound model.\nConstant for the Llama3.1 8B model.\nConstant for the Llama 3.1 8B Instant model.\nConstant for the Llama 3.3 70B model.\nConstant for the Llama 3.3 70B Versatile model.\nConstant for the Moonshot AI Kimi K2 Instruct model. …\nConstant for the o3 model.\nConstant for the o4-mini model.\nConstant for the OpenAI GPT OSS 120B model.\nConstant for the OpenAI GPT OSS 20B model.\nConstant for the Qwen 3 Coder 480B model.\nConstant for the Anthropic provider.\nConstant for the Cerebras provider.\nConstant for the Enosis Labs provider.\nConstant for the Gemini provider.\nConstant for the Groq provider.\nConstant for the OpenAI provider.\nConfiguration for retry logic with exponential backoff.\nThe multiplier for the exponential backoff. Each …\nThe base delay between retries, in milliseconds. This is …\nCreates a default <code>RetryConfig</code>.\nCalculates the delay duration for a specific retry attempt.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA flag indicating whether to add a random jitter to the …\nThe maximum possible delay between retries, in …\nThe maximum number of retry attempts to make.\nCreates a new <code>RetryConfig</code> with a specified maximum number …\nExecutes an asynchronous operation with retry logic based …")